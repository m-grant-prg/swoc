--------
Contents
========

1 ... Project Description

2 ... AutoTools (configure and make) Installation

3 ... Ubuntu Installation

4 ... Debian and Raspbian Installation

5 ... Utility Scripts



-------------------------
1 ... Project Description
=========================

System Synopsis
---------------
The Server Wait On Clients (SWOC) system provides a mechanism for clients to
register locks on a server which the server can then watch and wait until all
locks are released before taking some action.

It is easier to show an example:
Overnight, clients want to perform crontab work as a user and root, then do a
backup and then shutdown enabling the server to initiate its own shutdown.

So an example root crontab on the client:-
# This line adds a lock, performs some work of unknown duration and releases the
# lock.
10 00 * * 0,1,2,3,4,5,6 date ; swocclient -l ; apt-get update -qq ; \
apt-get upgrade -d -q -y ; apt-get dist-upgrade -d -q -y ; swocclient -r ; date

# This line adds a lock of its own, waits until this client has one lock
# outstanding, ie its own, then performs a backup, releases the lock and shuts
# down.
15 00 * * 0,1,2,3,4,6 date ; swocclient -l ; swocclient -w1 ; date ; \
netbckup -d ; swocclient -r ; date ; at -f shutdown now

At the same time, a user crontab on the client is using two crontab entries to
run some jobs each taking its own lock at the start and releasing it at the
end. Both of these lines are of unknown and variable duration:-
10 00 * * 0,1,2,3,4,6 swocclient -l ; \
get_iplayer --pvr 2>/home/mgrant/Videos/iPlayer/VideosErr.log ; date ; \
swocclient -r

10 00 * * 0,1,2,3,4,6 swocclient -l ; \
mget --quiet --sourcefile /home/mgrant/Downloads/MultiGetSource.txt \
--targetdir /home/mgrant/Downloads ; date ; swocclient -r

Meanwhile on the server, it waits until it has no more registered locks and then
initiates a shutdown.
20 00 * * 0,1,2,3,4,5,6 date ; swocserver -w ; date ; at -f shutdown now

This Project
------------
This AutoTools project contains the development files for the libswocclient
Server Wait On Clients Client Library.

The development files consist of c header files, pkg config file and man pages
for the functions in the libswocclient library.

This package needs to be installed on your system if you are going to build, or,
build against the libswocclient Server Wait On Clients Client Library (project
name libswocclient-lib).

Related packages in this system are the dev and lib packages for libswoccommon
SWOC Common Library, equivalent packages for the libswocserver Server Library,
equivalent packages for the libswocclient Client Library, a package swocclient
for the client application, a package swocserver for the server application and
a documentation project swocdoc. There is also a super project (git),
swoc-super, which has the above mentioned projects as git submodules.

So please refer also to:-
https://github.com/m-grant-prg/swocserver
https://github.com/m-grant-prg/libswocserver-lib
https://github.com/m-grant-prg/libswocserver-dev
https://github.com/m-grant-prg/swocclient
https://github.com/m-grant-prg/libswocclient-lib
https://github.com/m-grant-prg/libswocclient-dev
https://github.com/m-grant-prg/libswoccommon-lib
https://github.com/m-grant-prg/libswoccommon-dev
https://github.com/m-grant-prg/swocdoc
https://github.com/m-grant-prg/swoc-super


-------------------------------------------------
2 ... AutoTools (configure and make) Installation
=================================================

a) ... Download either the source or distribution tarball (the .tar.gz file)
	from:-
	https://github.com/m-grant-prg/libswocclient-dev/releases

b) ... Extract the tarball preserving the directory structure.

c) ... cd to the directory created.

d) ... If you downloaded the source tarball type 'autoreconf -if'

e) ... Type './configure'

f) ... As root or sudo, type 'make install clean'

(Quote marks are for textual clarity only).

To uninstall the package:

1 ... cd to the directory created in the above install process.

2 ... As root or sudo, type 'make uninstall clean'


-------------------------
3 ... Ubuntu Installation
=========================
This script is available as an Ubuntu package hosted in a Personal Package
Archive (PPA). If you add this PPA to your software sources then you can easily
install, update and remove the package.

To view the details of this PPA please follow the link below:-
	https://code.launchpad.net/~m-grant-prg/+archive/ubuntu/utils

To add this PPA to your system please type the following:-
	sudo add-apt-repository ppa:m-grant-prg/utils
	sudo apt-get update

To install this script on your system for use please type the following:-
	sudo apt-get update
	sudo apt-get install libswocclient-dev

To uninstall this package at any time please type:-
	sudo apt-get remove libswocclient-dev


--------------------------------------
4 ... Debian and Raspbian Installation
======================================
Debian and Raspbian '.deb' packages can be downloaded from:-
	https://github.com/m-grant-prg/libswocclient-dev/releases

They can then be installed using a utility such as GDebi which is available in
the standard repos.


---------------------
5 ... Utility Scripts
=====================
In the project root directory there is 1 helper script; bootstrap.sh.

bootstrap.sh
------------
This misleadingly named script bootstraps the project build and provides other
useful features. The main options below are probably c, D, m and t.

In AutoTools it is usually advisable to perform parallel builds. This means you
build somewhere other than the project root. This is because building creates
files and they would confuse the project root downwards. I always create a build
directory straight off the project root, cd to there and do all build and git
work from there, (.gitignore is already set to ignore such a directory).

Assuming you adopt the preceding paragraph then a typical invocation of the
script would be:-
../bootstrap.sh --make ..
The last '..' points the way to project root.

The full list of arguments to bootstrap.sh are:-
	-c, --distcheck perform a normal make distcheck.

	-d, --debug build with appropriate debug flags.

	-D, --dist perform a make dist.

	-f, --distcheckfake run a make  distcheck  using  a  fake  AT  standard
	directory as a substitute for an absolute path which distcheck does not
	support.

	-g, --gnulib run gnulib-tool --update. Checks for the existence of  the
	cache  file  proj-root/m4/gnulib-cache.m4.  If  it  does  not exist the
	update is not run.

	-h, --help prints usage information.

	-m, --make compile and link - plain make.

	-s, --sparse pass --enable-sparse=yes to configure.

	-t, --source-tarball perform a make srctarball to build a source
	tarball.

	-V, --version prints version information
